
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001046  000010da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001046  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  0080011e  0080011e  000010f8  2**0
                  ALLOC
  3 .stab         00000b7c  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000019e  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000978  00000000  00000000  00001e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001767  00000000  00000000  0000278a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00010efc  00000000  00000000  00003ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003878  00000000  00000000  00014ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0001fc3c  00000000  00000000  00018665  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f70  00000000  00000000  000382a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000061a5  00000000  00000000  00039214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008ea9  00000000  00000000  0003f3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 002193a4  00000000  00000000  00048262  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000026d4  00000000  00000000  00261606  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  00263cda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
       2:	00 00       	nop
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
      28:	3f c3       	rjmp	.+1662   	; 0x6a8 <__vector_10>
      2a:	00 00       	nop
      2c:	05 c4       	rjmp	.+2058   	; 0x838 <__vector_11>
      2e:	00 00       	nop
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c1       	rjmp	.+700    	; 0x322 <__vector_25>
      66:	00 00       	nop
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 02 00 00 08 eb 03 4b 20 00 00 01 02     ..........K ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      da:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000e8 <LanguageString>:
      e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
     106:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
     116:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     126:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d0 e2       	ldi	r29, 0x20	; 32
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	e6 e4       	ldi	r30, 0x46	; 70
     14a:	f0 e1       	ldi	r31, 0x10	; 16
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	ae 31       	cpi	r26, 0x1E	; 30
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	12 e0       	ldi	r17, 0x02	; 2
     15e:	ae e1       	ldi	r26, 0x1E	; 30
     160:	b1 e0       	ldi	r27, 0x01	; 1
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a2 34       	cpi	r26, 0x42	; 66
     168:	b1 07       	cpc	r27, r17
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
     16c:	6e d0       	rcall	.+220    	; 0x24a <main>
     16e:	69 c7       	rjmp	.+3794   	; 0x1042 <_exit>

00000170 <__bad_interrupt>:
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     172:	9b b1       	in	r25, 0x0b	; 11
     174:	9f 70       	andi	r25, 0x0F	; 15
     176:	98 2b       	or	r25, r24
     178:	9b b9       	out	0x0b, r25	; 11
			}
     17a:	08 95       	ret

0000017c <RingBuffer_Insert>:
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     17c:	fc 01       	movw	r30, r24

			*Buffer->In = Data;
     17e:	a0 81       	ld	r26, Z
     180:	b1 81       	ldd	r27, Z+1	; 0x01
     182:	6c 93       	st	X, r22

			if (++Buffer->In == Buffer->End)
     184:	80 81       	ld	r24, Z
     186:	91 81       	ldd	r25, Z+1	; 0x01
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	91 83       	std	Z+1, r25	; 0x01
     18c:	80 83       	st	Z, r24
     18e:	26 81       	ldd	r18, Z+6	; 0x06
     190:	37 81       	ldd	r19, Z+7	; 0x07
     192:	82 17       	cp	r24, r18
     194:	93 07       	cpc	r25, r19
     196:	21 f4       	brne	.+8      	; 0x1a0 <RingBuffer_Insert+0x24>
			  Buffer->In = Buffer->Start;
     198:	84 81       	ldd	r24, Z+4	; 0x04
     19a:	95 81       	ldd	r25, Z+5	; 0x05
     19c:	91 83       	std	Z+1, r25	; 0x01
     19e:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1a0:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1a2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     1a4:	82 85       	ldd	r24, Z+10	; 0x0a
     1a6:	93 85       	ldd	r25, Z+11	; 0x0b
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	93 87       	std	Z+11, r25	; 0x0b
     1ac:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1ae:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     1b0:	08 95       	ret

000001b2 <RingBuffer_Remove>:
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1b2:	fc 01       	movw	r30, r24

			uint8_t Data = *Buffer->Out;
     1b4:	a2 81       	ldd	r26, Z+2	; 0x02
     1b6:	b3 81       	ldd	r27, Z+3	; 0x03
     1b8:	8d 91       	ld	r24, X+

			if (++Buffer->Out == Buffer->End)
     1ba:	b3 83       	std	Z+3, r27	; 0x03
     1bc:	a2 83       	std	Z+2, r26	; 0x02
     1be:	26 81       	ldd	r18, Z+6	; 0x06
     1c0:	37 81       	ldd	r19, Z+7	; 0x07
     1c2:	a2 17       	cp	r26, r18
     1c4:	b3 07       	cpc	r27, r19
     1c6:	21 f4       	brne	.+8      	; 0x1d0 <RingBuffer_Remove+0x1e>
			  Buffer->Out = Buffer->Start;
     1c8:	24 81       	ldd	r18, Z+4	; 0x04
     1ca:	35 81       	ldd	r19, Z+5	; 0x05
     1cc:	33 83       	std	Z+3, r19	; 0x03
     1ce:	22 83       	std	Z+2, r18	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1d0:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1d2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     1d4:	22 85       	ldd	r18, Z+10	; 0x0a
     1d6:	33 85       	ldd	r19, Z+11	; 0x0b
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	30 40       	sbci	r19, 0x00	; 0
     1dc:	33 87       	std	Z+11, r19	; 0x0b
     1de:	22 87       	std	Z+10, r18	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1e0:	9f bf       	out	0x3f, r25	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
     1e2:	08 95       	ret

000001e4 <RingBuffer_InitBuffer.clone.0>:
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1e4:	fc 01       	movw	r30, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1e6:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1e8:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     1ea:	71 83       	std	Z+1, r23	; 0x01
     1ec:	60 83       	st	Z, r22
			Buffer->Out    = DataPtr;
     1ee:	73 83       	std	Z+3, r23	; 0x03
     1f0:	62 83       	std	Z+2, r22	; 0x02
			Buffer->Start  = &DataPtr[0];
     1f2:	75 83       	std	Z+5, r23	; 0x05
     1f4:	64 83       	std	Z+4, r22	; 0x04
			Buffer->End    = &DataPtr[Size];
     1f6:	60 58       	subi	r22, 0x80	; 128
     1f8:	7f 4f       	sbci	r23, 0xFF	; 255
     1fa:	77 83       	std	Z+7, r23	; 0x07
     1fc:	66 83       	std	Z+6, r22	; 0x06
			Buffer->Size   = Size;
     1fe:	80 e8       	ldi	r24, 0x80	; 128
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	91 87       	std	Z+9, r25	; 0x09
     204:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     206:	13 86       	std	Z+11, r1	; 0x0b
     208:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     20a:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     20c:	08 95       	ret

0000020e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     20e:	84 b7       	in	r24, 0x34	; 52
     210:	87 7f       	andi	r24, 0xF7	; 247
     212:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     214:	88 e1       	ldi	r24, 0x18	; 24
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	f8 94       	cli
     21a:	80 93 60 00 	sts	0x0060, r24
     21e:	10 92 60 00 	sts	0x0060, r1
     222:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	80 e8       	ldi	r24, 0x80	; 128
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	f8 94       	cli
     22c:	80 93 61 00 	sts	0x0061, r24
     230:	90 93 61 00 	sts	0x0061, r25
     234:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     236:	8a b1       	in	r24, 0x0a	; 10
     238:	80 6f       	ori	r24, 0xF0	; 240
     23a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     23c:	8b b1       	in	r24, 0x0b	; 11
     23e:	8f 70       	andi	r24, 0x0F	; 15
     240:	8b b9       	out	0x0b, r24	; 11
	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     242:	1c d2       	rcall	.+1080   	; 0x67c <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
     244:	84 e0       	ldi	r24, 0x04	; 4
     246:	85 bd       	out	0x25, r24	; 37
}
     248:	08 95       	ret

0000024a <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
	SetupHardware();
     24e:	df df       	rcall	.-66     	; 0x20e <SetupHardware>

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
     250:	8a e2       	ldi	r24, 0x2A	; 42
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	66 e3       	ldi	r22, 0x36	; 54
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	c5 df       	rcall	.-118    	; 0x1e4 <RingBuffer_InitBuffer.clone.0>
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));
     25a:	8e e1       	ldi	r24, 0x1E	; 30
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	66 eb       	ldi	r22, 0xB6	; 182
     260:	71 e0       	ldi	r23, 0x01	; 1
     262:	c0 df       	rcall	.-128    	; 0x1e4 <RingBuffer_InitBuffer.clone.0>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     264:	80 e1       	ldi	r24, 0x10	; 16
     266:	85 df       	rcall	.-246    	; 0x172 <LEDs_SetAllLEDs>
	sei();
     268:	78 94       	sei
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     26a:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     26c:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     26e:	20 91 34 01 	lds	r18, 0x0134
     272:	30 91 35 01 	lds	r19, 0x0135
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     276:	8f bf       	out	0x3f, r24	; 63

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     278:	80 91 32 01 	lds	r24, 0x0132
     27c:	90 91 33 01 	lds	r25, 0x0133
     280:	28 17       	cp	r18, r24
     282:	39 07       	cpc	r19, r25
     284:	49 f0       	breq	.+18     	; 0x298 <main+0x4e>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	87 d6       	rcall	.+3342   	; 0xf9a <CDC_Device_ReceiveByte>
     28c:	bc 01       	movw	r22, r24

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
     28e:	97 fd       	sbrc	r25, 7
     290:	03 c0       	rjmp	.+6      	; 0x298 <main+0x4e>
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     292:	8a e2       	ldi	r24, 0x2A	; 42
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	72 df       	rcall	.-284    	; 0x17c <RingBuffer_Insert>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     298:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     29a:	f8 94       	cli
     29c:	c0 91 28 01 	lds	r28, 0x0128
     2a0:	d0 91 29 01 	lds	r29, 0x0129
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2a4:	8f bf       	out	0x3f, r24	; 63
		}

		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > (uint8_t)(sizeof(USARTtoUSB_Buffer_Data) * .75)))
     2a6:	a8 99       	sbic	0x15, 0	; 21
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <main+0x66>
     2aa:	c1 36       	cpi	r28, 0x61	; 97
     2ac:	d1 05       	cpc	r29, r1
     2ae:	90 f0       	brcs	.+36     	; 0x2d4 <main+0x8a>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
     2b0:	a8 9a       	sbi	0x15, 0	; 21

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
     2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <main+0x86>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     2b4:	e0 91 20 01 	lds	r30, 0x0120
     2b8:	f0 91 21 01 	lds	r31, 0x0121
			{
				/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
				if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	60 81       	ld	r22, Z
     2c2:	00 d6       	rcall	.+3072   	; 0xec4 <CDC_Device_SendByte>
     2c4:	21 97       	sbiw	r28, 0x01	; 1
     2c6:	88 23       	and	r24, r24
     2c8:	29 f4       	brne	.+10     	; 0x2d4 <main+0x8a>
				{
					break;
				}

				/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
				RingBuffer_Remove(&USARTtoUSB_Buffer);
     2ca:	8e e1       	ldi	r24, 0x1E	; 30
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	71 df       	rcall	.-286    	; 0x1b2 <RingBuffer_Remove>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
     2d0:	20 97       	sbiw	r28, 0x00	; 0
     2d2:	81 f7       	brne	.-32     	; 0x2b4 <main+0x6a>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     2d4:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     2d6:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     2d8:	80 91 34 01 	lds	r24, 0x0134
     2dc:	90 91 35 01 	lds	r25, 0x0135
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     2e0:	2f bf       	out	0x3f, r18	; 63
				RingBuffer_Remove(&USARTtoUSB_Buffer);
			}
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
     2e2:	00 97       	sbiw	r24, 0x00	; 0
     2e4:	49 f0       	breq	.+18     	; 0x2f8 <main+0xae>
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
     2e6:	8a e2       	ldi	r24, 0x2A	; 42
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	63 df       	rcall	.-314    	; 0x1b2 <RingBuffer_Remove>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     2ec:	90 91 c8 00 	lds	r25, 0x00C8
     2f0:	95 ff       	sbrs	r25, 5
     2f2:	fc cf       	rjmp	.-8      	; 0x2ec <main+0xa2>
				UDR1 = DataByte;
     2f4:	80 93 ce 00 	sts	0x00CE, r24

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	3f d6       	rcall	.+3198   	; 0xf7c <CDC_Device_USBTask>
		USB_USBTask();
     2fe:	f7 d4       	rcall	.+2542   	; 0xcee <USB_USBTask>
	}
     300:	b4 cf       	rjmp	.-152    	; 0x26a <main+0x20>

00000302 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     302:	80 ea       	ldi	r24, 0xA0	; 160
}
     304:	36 cf       	rjmp	.-404    	; 0x172 <LEDs_SetAllLEDs>

00000306 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     306:	80 e1       	ldi	r24, 0x10	; 16
}
     308:	34 cf       	rjmp	.-408    	; 0x172 <LEDs_SetAllLEDs>

0000030a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	b6 d5       	rcall	.+2924   	; 0xe7c <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     310:	80 ff       	sbrs	r24, 0
     312:	02 c0       	rjmp	.+4      	; 0x318 <EVENT_USB_Device_ConfigurationChanged+0xe>
     314:	80 e6       	ldi	r24, 0x60	; 96
     316:	01 c0       	rjmp	.+2      	; 0x31a <EVENT_USB_Device_ConfigurationChanged+0x10>
     318:	80 e9       	ldi	r24, 0x90	; 144
}
     31a:	2b cf       	rjmp	.-426    	; 0x172 <LEDs_SetAllLEDs>

0000031c <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	91 e0       	ldi	r25, 0x01	; 1
}
     320:	01 c5       	rjmp	.+2562   	; 0xd24 <CDC_Device_ProcessControlRequest>

00000322 <__vector_25>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	0b b6       	in	r0, 0x3b	; 59
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	ef 93       	push	r30
     346:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     348:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     34c:	8e b3       	in	r24, 0x1e	; 30
     34e:	84 30       	cpi	r24, 0x04	; 4
     350:	19 f4       	brne	.+6      	; 0x358 <__vector_25+0x36>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
     352:	8e e1       	ldi	r24, 0x1E	; 30
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	12 df       	rcall	.-476    	; 0x17c <RingBuffer_Insert>
}
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	bf 91       	pop	r27
     35e:	af 91       	pop	r26
     360:	9f 91       	pop	r25
     362:	8f 91       	pop	r24
     364:	7f 91       	pop	r23
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0b be       	out	0x3b, r0	; 59
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     37e:	1f 93       	push	r17
     380:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     382:	a1 8d       	ldd	r26, Z+25	; 0x19
     384:	a1 50       	subi	r26, 0x01	; 1
     386:	a2 30       	cpi	r26, 0x02	; 2
     388:	28 f4       	brcc	.+10     	; 0x394 <EVENT_CDC_Device_LineEncodingChanged+0x16>
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	a5 5e       	subi	r26, 0xE5	; 229
     38e:	be 4f       	sbci	r27, 0xFE	; 254
     390:	1c 91       	ld	r17, X
     392:	01 c0       	rjmp	.+2      	; 0x396 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     394:	10 e0       	ldi	r17, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     396:	80 8d       	ldd	r24, Z+24	; 0x18
     398:	82 30       	cpi	r24, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <EVENT_CDC_Device_LineEncodingChanged+0x20>
	  ConfigMask |= (1 << USBS1);
     39c:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     39e:	82 8d       	ldd	r24, Z+26	; 0x1a
     3a0:	87 30       	cpi	r24, 0x07	; 7
     3a2:	31 f0       	breq	.+12     	; 0x3b0 <EVENT_CDC_Device_LineEncodingChanged+0x32>
     3a4:	88 30       	cpi	r24, 0x08	; 8
     3a6:	31 f0       	breq	.+12     	; 0x3b4 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     3a8:	86 30       	cpi	r24, 0x06	; 6
     3aa:	29 f4       	brne	.+10     	; 0x3b6 <EVENT_CDC_Device_LineEncodingChanged+0x38>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     3ac:	12 60       	ori	r17, 0x02	; 2
			break;
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     3b0:	14 60       	ori	r17, 0x04	; 4
			break;
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <EVENT_CDC_Device_LineEncodingChanged+0x38>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     3b4:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     3b6:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     3ba:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     3be:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     3c2:	24 89       	ldd	r18, Z+20	; 0x14
     3c4:	35 89       	ldd	r19, Z+21	; 0x15
     3c6:	46 89       	ldd	r20, Z+22	; 0x16
     3c8:	57 89       	ldd	r21, Z+23	; 0x17
     3ca:	ca 01       	movw	r24, r20
     3cc:	b9 01       	movw	r22, r18
     3ce:	96 95       	lsr	r25
     3d0:	87 95       	ror	r24
     3d2:	77 95       	ror	r23
     3d4:	67 95       	ror	r22
     3d6:	60 5c       	subi	r22, 0xC0	; 192
     3d8:	7d 4b       	sbci	r23, 0xBD	; 189
     3da:	80 4f       	sbci	r24, 0xF0	; 240
     3dc:	9f 4f       	sbci	r25, 0xFF	; 255
     3de:	0f d6       	rcall	.+3102   	; 0xffe <__udivmodsi4>
     3e0:	21 50       	subi	r18, 0x01	; 1
     3e2:	30 40       	sbci	r19, 0x00	; 0
     3e4:	30 93 cd 00 	sts	0x00CD, r19
     3e8:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     3ec:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     3f6:	88 e9       	ldi	r24, 0x98	; 152
     3f8:	80 93 c9 00 	sts	0x00C9, r24
}
     3fc:	1f 91       	pop	r17
     3fe:	08 95       	ret

00000400 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     400:	92 30       	cpi	r25, 0x02	; 2
     402:	29 f0       	breq	.+10     	; 0x40e <CALLBACK_USB_GetDescriptor+0xe>
     404:	93 30       	cpi	r25, 0x03	; 3
     406:	41 f0       	breq	.+16     	; 0x418 <CALLBACK_USB_GetDescriptor+0x18>
     408:	91 30       	cpi	r25, 0x01	; 1
     40a:	e9 f4       	brne	.+58     	; 0x446 <CALLBACK_USB_GetDescriptor+0x46>
     40c:	17 c0       	rjmp	.+46     	; 0x43c <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     40e:	2e e3       	ldi	r18, 0x3E	; 62
     410:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     412:	ea ea       	ldi	r30, 0xAA	; 170
     414:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     416:	1b c0       	rjmp	.+54     	; 0x44e <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	41 f0       	breq	.+16     	; 0x42c <CALLBACK_USB_GetDescriptor+0x2c>
     41c:	81 30       	cpi	r24, 0x01	; 1
     41e:	18 f0       	brcs	.+6      	; 0x426 <CALLBACK_USB_GetDescriptor+0x26>
     420:	82 30       	cpi	r24, 0x02	; 2
     422:	89 f4       	brne	.+34     	; 0x446 <CALLBACK_USB_GetDescriptor+0x46>
     424:	06 c0       	rjmp	.+12     	; 0x432 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     426:	e8 ee       	ldi	r30, 0xE8	; 232
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	05 c0       	rjmp	.+10     	; 0x436 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     42c:	ec ee       	ldi	r30, 0xEC	; 236
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	02 c0       	rjmp	.+4      	; 0x436 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     432:	e6 e0       	ldi	r30, 0x06	; 6
     434:	f1 e0       	ldi	r31, 0x01	; 1
     436:	24 91       	lpm	r18, Z+
     438:	30 e0       	ldi	r19, 0x00	; 0
					break;
     43a:	09 c0       	rjmp	.+18     	; 0x44e <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     43c:	22 e1       	ldi	r18, 0x12	; 18
     43e:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     440:	e8 e9       	ldi	r30, 0x98	; 152
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	04 c0       	rjmp	.+8      	; 0x44e <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     44a:	e0 e0       	ldi	r30, 0x00	; 0
     44c:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     44e:	da 01       	movw	r26, r20
     450:	11 96       	adiw	r26, 0x01	; 1
     452:	fc 93       	st	X, r31
     454:	ee 93       	st	-X, r30
	return Size;
}
     456:	c9 01       	movw	r24, r18
     458:	08 95       	ret

0000045a <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     45a:	98 2f       	mov	r25, r24
     45c:	2c c0       	rjmp	.+88     	; 0x4b6 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     45e:	29 2f       	mov	r18, r25
     460:	2f 70       	andi	r18, 0x0F	; 15
     462:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     466:	98 17       	cp	r25, r24
     468:	39 f0       	breq	.+14     	; 0x478 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     46a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     46e:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     472:	50 91 f0 00 	lds	r21, 0x00F0
     476:	03 c0       	rjmp	.+6      	; 0x47e <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     478:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     47a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     47c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     47e:	21 ff       	sbrs	r18, 1
     480:	19 c0       	rjmp	.+50     	; 0x4b4 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     482:	30 91 eb 00 	lds	r19, 0x00EB
     486:	3e 7f       	andi	r19, 0xFE	; 254
     488:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     48c:	30 91 ed 00 	lds	r19, 0x00ED
     490:	3d 7f       	andi	r19, 0xFD	; 253
     492:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     496:	30 91 eb 00 	lds	r19, 0x00EB
     49a:	31 60       	ori	r19, 0x01	; 1
     49c:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     4a0:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     4a4:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     4a8:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     4ac:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     4b0:	27 ff       	sbrs	r18, 7
     4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     4b4:	9f 5f       	subi	r25, 0xFF	; 255
     4b6:	97 30       	cpi	r25, 0x07	; 7
     4b8:	90 f2       	brcs	.-92     	; 0x45e <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     4c4:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     4c6:	08 95       	ret

000004c8 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     4d6:	e8 2e       	mov	r14, r24
     4d8:	e7 01       	movw	r28, r14
     4da:	7e 01       	movw	r14, r28
     4dc:	f9 2e       	mov	r15, r25
     4de:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     4e0:	00 e0       	ldi	r16, 0x00	; 0
     4e2:	2a c0       	rjmp	.+84     	; 0x538 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     4e4:	98 81       	ld	r25, Y
     4e6:	99 23       	and	r25, r25
     4e8:	29 f1       	breq	.+74     	; 0x534 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     4ea:	6b 81       	ldd	r22, Y+3	; 0x03
     4ec:	e9 81       	ldd	r30, Y+1	; 0x01
     4ee:	fa 81       	ldd	r31, Y+2	; 0x02
     4f0:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     4f2:	89 2f       	mov	r24, r25
     4f4:	8f 70       	andi	r24, 0x0F	; 15
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     4f6:	87 30       	cpi	r24, 0x07	; 7
     4f8:	18 f5       	brcc	.+70     	; 0x540 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     4fa:	62 95       	swap	r22
     4fc:	66 0f       	add	r22, r22
     4fe:	66 0f       	add	r22, r22
     500:	60 7c       	andi	r22, 0xC0	; 192
     502:	99 1f       	adc	r25, r25
     504:	99 27       	eor	r25, r25
     506:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     508:	69 2b       	or	r22, r25
     50a:	22 30       	cpi	r18, 0x02	; 2
     50c:	10 f0       	brcs	.+4      	; 0x512 <Endpoint_ConfigureEndpointTable+0x4a>
     50e:	96 e0       	ldi	r25, 0x06	; 6
     510:	01 c0       	rjmp	.+2      	; 0x514 <Endpoint_ConfigureEndpointTable+0x4c>
     512:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     514:	28 e0       	ldi	r18, 0x08	; 8
     516:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	03 c0       	rjmp	.+6      	; 0x522 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     51c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     51e:	22 0f       	add	r18, r18
     520:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     522:	2e 17       	cp	r18, r30
     524:	3f 07       	cpc	r19, r31
     526:	d0 f3       	brcs	.-12     	; 0x51c <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     528:	42 95       	swap	r20
     52a:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     52c:	49 2b       	or	r20, r25
     52e:	95 df       	rcall	.-214    	; 0x45a <Endpoint_ConfigureEndpoint_Prv>
     530:	88 23       	and	r24, r24
     532:	31 f0       	breq	.+12     	; 0x540 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     534:	0f 5f       	subi	r16, 0xFF	; 255
     536:	25 96       	adiw	r28, 0x05	; 5
     538:	01 17       	cp	r16, r17
     53a:	a0 f2       	brcs	.-88     	; 0x4e4 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	01 c0       	rjmp	.+2      	; 0x542 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     540:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	08 95       	ret

00000550 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     550:	80 91 3a 02 	lds	r24, 0x023A
     554:	87 ff       	sbrs	r24, 7
     556:	11 c0       	rjmp	.+34     	; 0x57a <Endpoint_ClearStatusStage+0x2a>
     558:	03 c0       	rjmp	.+6      	; 0x560 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     55a:	8e b3       	in	r24, 0x1e	; 30
     55c:	88 23       	and	r24, r24
     55e:	b1 f0       	breq	.+44     	; 0x58c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     560:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     564:	82 ff       	sbrs	r24, 2
     566:	f9 cf       	rjmp	.-14     	; 0x55a <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     568:	80 91 e8 00 	lds	r24, 0x00E8
     56c:	8b 77       	andi	r24, 0x7B	; 123
     56e:	80 93 e8 00 	sts	0x00E8, r24
     572:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     574:	8e b3       	in	r24, 0x1e	; 30
     576:	88 23       	and	r24, r24
     578:	49 f0       	breq	.+18     	; 0x58c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     57a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     57e:	80 ff       	sbrs	r24, 0
     580:	f9 cf       	rjmp	.-14     	; 0x574 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     582:	80 91 e8 00 	lds	r24, 0x00E8
     586:	8e 77       	andi	r24, 0x7E	; 126
     588:	80 93 e8 00 	sts	0x00E8, r24
     58c:	08 95       	ret

0000058e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     58e:	80 91 e4 00 	lds	r24, 0x00E4
     592:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     596:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     598:	20 91 ec 00 	lds	r18, 0x00EC
     59c:	20 ff       	sbrs	r18, 0
     59e:	25 c0       	rjmp	.+74     	; 0x5ea <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5a0:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     5a4:	20 fd       	sbrc	r18, 0
     5a6:	15 c0       	rjmp	.+42     	; 0x5d2 <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5a8:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5aa:	22 23       	and	r18, r18
     5ac:	a1 f0       	breq	.+40     	; 0x5d6 <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5ae:	25 30       	cpi	r18, 0x05	; 5
     5b0:	a1 f0       	breq	.+40     	; 0x5da <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     5b2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     5b6:	25 fd       	sbrc	r18, 5
     5b8:	12 c0       	rjmp	.+36     	; 0x5de <Endpoint_WaitUntilReady+0x50>
     5ba:	20 91 e4 00 	lds	r18, 0x00E4
     5be:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     5c2:	28 17       	cp	r18, r24
     5c4:	39 07       	cpc	r19, r25
     5c6:	41 f3       	breq	.-48     	; 0x598 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     5c8:	44 23       	and	r20, r20
     5ca:	59 f0       	breq	.+22     	; 0x5e2 <Endpoint_WaitUntilReady+0x54>
     5cc:	41 50       	subi	r20, 0x01	; 1
     5ce:	c9 01       	movw	r24, r18
     5d0:	e3 cf       	rjmp	.-58     	; 0x598 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     5e2:	84 e0       	ldi	r24, 0x04	; 4
     5e4:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     5e6:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     5e8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5ea:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     5ee:	22 ff       	sbrs	r18, 2
     5f0:	db cf       	rjmp	.-74     	; 0x5a8 <Endpoint_WaitUntilReady+0x1a>
     5f2:	f9 cf       	rjmp	.-14     	; 0x5e6 <Endpoint_WaitUntilReady+0x58>

000005f4 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     5fc:	48 d0       	rcall	.+144    	; 0x68e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     5fe:	4f d0       	rcall	.+158    	; 0x69e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     600:	c8 ed       	ldi	r28, 0xD8	; 216
     602:	d0 e0       	ldi	r29, 0x00	; 0
     604:	88 81       	ld	r24, Y
     606:	8f 77       	andi	r24, 0x7F	; 127
     608:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     60a:	88 81       	ld	r24, Y
     60c:	80 68       	ori	r24, 0x80	; 128
     60e:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     610:	88 81       	ld	r24, Y
     612:	8f 7d       	andi	r24, 0xDF	; 223
     614:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     616:	e7 ed       	ldi	r30, 0xD7	; 215
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	80 68       	ori	r24, 0x80	; 128
     61e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     620:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     622:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     624:	10 92 36 02 	sts	0x0236, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     628:	10 92 38 02 	sts	0x0238, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     62c:	10 92 37 02 	sts	0x0237, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     630:	00 ee       	ldi	r16, 0xE0	; 224
     632:	10 e0       	ldi	r17, 0x00	; 0
     634:	f8 01       	movw	r30, r16
     636:	80 81       	ld	r24, Z
     638:	8b 7f       	andi	r24, 0xFB	; 251
     63a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     63c:	88 81       	ld	r24, Y
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	42 e0       	ldi	r20, 0x02	; 2
     648:	08 df       	rcall	.-496    	; 0x45a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     64a:	e1 ee       	ldi	r30, 0xE1	; 225
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8e 7f       	andi	r24, 0xFE	; 254
     652:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     654:	e2 ee       	ldi	r30, 0xE2	; 226
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 81       	ld	r24, Z
     65a:	81 60       	ori	r24, 0x01	; 1
     65c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     65e:	80 81       	ld	r24, Z
     660:	88 60       	ori	r24, 0x08	; 8
     662:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     664:	f8 01       	movw	r30, r16
     666:	80 81       	ld	r24, Z
     668:	8e 7f       	andi	r24, 0xFE	; 254
     66a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     66c:	88 81       	ld	r24, Y
     66e:	80 61       	ori	r24, 0x10	; 16
     670:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     67c:	e7 ed       	ldi	r30, 0xD7	; 215
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	81 60       	ori	r24, 0x01	; 1
     684:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 39 02 	sts	0x0239, r24

	USB_ResetInterface();
}
     68c:	b3 cf       	rjmp	.-154    	; 0x5f4 <USB_ResetInterface>

0000068e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     68e:	e8 ed       	ldi	r30, 0xD8	; 216
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	8c 7f       	andi	r24, 0xFC	; 252
     696:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     698:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     69c:	08 95       	ret

0000069e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     69e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     6a2:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     6a6:	08 95       	ret

000006a8 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	0b b6       	in	r0, 0x3b	; 59
     6b2:	0f 92       	push	r0
     6b4:	11 24       	eor	r1, r1
     6b6:	2f 93       	push	r18
     6b8:	3f 93       	push	r19
     6ba:	4f 93       	push	r20
     6bc:	5f 93       	push	r21
     6be:	6f 93       	push	r22
     6c0:	7f 93       	push	r23
     6c2:	8f 93       	push	r24
     6c4:	9f 93       	push	r25
     6c6:	af 93       	push	r26
     6c8:	bf 93       	push	r27
     6ca:	ef 93       	push	r30
     6cc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     6ce:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     6d2:	82 ff       	sbrs	r24, 2
     6d4:	0a c0       	rjmp	.+20     	; 0x6ea <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     6d6:	80 91 e2 00 	lds	r24, 0x00E2
     6da:	82 ff       	sbrs	r24, 2
     6dc:	06 c0       	rjmp	.+12     	; 0x6ea <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     6de:	80 91 e1 00 	lds	r24, 0x00E1
     6e2:	8b 7f       	andi	r24, 0xFB	; 251
     6e4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     6e8:	01 d3       	rcall	.+1538   	; 0xcec <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     6ea:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     6ee:	80 ff       	sbrs	r24, 0
     6f0:	1b c0       	rjmp	.+54     	; 0x728 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     6f2:	80 91 d8 00 	lds	r24, 0x00D8
     6f6:	80 ff       	sbrs	r24, 0
     6f8:	17 c0       	rjmp	.+46     	; 0x728 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     6fa:	80 91 da 00 	lds	r24, 0x00DA
     6fe:	8e 7f       	andi	r24, 0xFE	; 254
     700:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     704:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     708:	80 ff       	sbrs	r24, 0
     70a:	0b c0       	rjmp	.+22     	; 0x722 <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     70c:	8c e0       	ldi	r24, 0x0C	; 12
     70e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     710:	8e e0       	ldi	r24, 0x0E	; 14
     712:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     714:	09 b4       	in	r0, 0x29	; 41
     716:	00 fe       	sbrs	r0, 0
     718:	fd cf       	rjmp	.-6      	; 0x714 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     71e:	f1 dd       	rcall	.-1054   	; 0x302 <EVENT_USB_Device_Connect>
     720:	03 c0       	rjmp	.+6      	; 0x728 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     722:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     724:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     726:	ef dd       	rcall	.-1058   	; 0x306 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     728:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     72c:	80 ff       	sbrs	r24, 0
     72e:	17 c0       	rjmp	.+46     	; 0x75e <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     730:	80 91 e2 00 	lds	r24, 0x00E2
     734:	80 ff       	sbrs	r24, 0
     736:	13 c0       	rjmp	.+38     	; 0x75e <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     738:	80 91 e2 00 	lds	r24, 0x00E2
     73c:	8e 7f       	andi	r24, 0xFE	; 254
     73e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     742:	80 91 e2 00 	lds	r24, 0x00E2
     746:	80 61       	ori	r24, 0x10	; 16
     748:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     74c:	80 91 d8 00 	lds	r24, 0x00D8
     750:	80 62       	ori	r24, 0x20	; 32
     752:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     756:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     758:	85 e0       	ldi	r24, 0x05	; 5
     75a:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     75c:	c7 d2       	rcall	.+1422   	; 0xcec <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     75e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     762:	84 ff       	sbrs	r24, 4
     764:	2c c0       	rjmp	.+88     	; 0x7be <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     766:	80 91 e2 00 	lds	r24, 0x00E2
     76a:	84 ff       	sbrs	r24, 4
     76c:	28 c0       	rjmp	.+80     	; 0x7be <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     76e:	8c e0       	ldi	r24, 0x0C	; 12
     770:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     772:	8e e0       	ldi	r24, 0x0E	; 14
     774:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     776:	09 b4       	in	r0, 0x29	; 41
     778:	00 fe       	sbrs	r0, 0
     77a:	fd cf       	rjmp	.-6      	; 0x776 <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     77c:	80 91 d8 00 	lds	r24, 0x00D8
     780:	8f 7d       	andi	r24, 0xDF	; 223
     782:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     786:	80 91 e1 00 	lds	r24, 0x00E1
     78a:	8f 7e       	andi	r24, 0xEF	; 239
     78c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     790:	80 91 e2 00 	lds	r24, 0x00E2
     794:	8f 7e       	andi	r24, 0xEF	; 239
     796:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     79a:	80 91 e2 00 	lds	r24, 0x00E2
     79e:	81 60       	ori	r24, 0x01	; 1
     7a0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     7a4:	80 91 36 02 	lds	r24, 0x0236
     7a8:	88 23       	and	r24, r24
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <__vector_10+0x10c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     7ac:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     7b0:	87 ff       	sbrs	r24, 7
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <__vector_10+0x110>
     7b4:	84 e0       	ldi	r24, 0x04	; 4
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <__vector_10+0x112>
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     7bc:	97 d2       	rcall	.+1326   	; 0xcec <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     7be:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     7c2:	83 ff       	sbrs	r24, 3
     7c4:	26 c0       	rjmp	.+76     	; 0x812 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     7c6:	80 91 e2 00 	lds	r24, 0x00E2
     7ca:	83 ff       	sbrs	r24, 3
     7cc:	22 c0       	rjmp	.+68     	; 0x812 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     7ce:	80 91 e1 00 	lds	r24, 0x00E1
     7d2:	87 7f       	andi	r24, 0xF7	; 247
     7d4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     7dc:	10 92 36 02 	sts	0x0236, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7e0:	80 91 e1 00 	lds	r24, 0x00E1
     7e4:	8e 7f       	andi	r24, 0xFE	; 254
     7e6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     7ea:	80 91 e2 00 	lds	r24, 0x00E2
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     7f4:	80 91 e2 00 	lds	r24, 0x00E2
     7f8:	80 61       	ori	r24, 0x10	; 16
     7fa:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	42 e0       	ldi	r20, 0x02	; 2
     804:	2a de       	rcall	.-940    	; 0x45a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     806:	80 91 f0 00 	lds	r24, 0x00F0
     80a:	88 60       	ori	r24, 0x08	; 8
     80c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     810:	6d d2       	rcall	.+1242   	; 0xcec <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0b be       	out	0x3b, r0	; 59
     82e:	0f 90       	pop	r0
     830:	0f be       	out	0x3f, r0	; 63
     832:	0f 90       	pop	r0
     834:	1f 90       	pop	r1
     836:	18 95       	reti

00000838 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     838:	1f 92       	push	r1
     83a:	0f 92       	push	r0
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	0f 92       	push	r0
     840:	0b b6       	in	r0, 0x3b	; 59
     842:	0f 92       	push	r0
     844:	11 24       	eor	r1, r1
     846:	1f 93       	push	r17
     848:	2f 93       	push	r18
     84a:	3f 93       	push	r19
     84c:	4f 93       	push	r20
     84e:	5f 93       	push	r21
     850:	6f 93       	push	r22
     852:	7f 93       	push	r23
     854:	8f 93       	push	r24
     856:	9f 93       	push	r25
     858:	af 93       	push	r26
     85a:	bf 93       	push	r27
     85c:	ef 93       	push	r30
     85e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     860:	10 91 e9 00 	lds	r17, 0x00E9
     864:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     866:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     86a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     86e:	80 91 f0 00 	lds	r24, 0x00F0
     872:	87 7f       	andi	r24, 0xF7	; 247
     874:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     878:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     87a:	d4 d0       	rcall	.+424    	; 0xa24 <USB_Device_ProcessControlRequest>
     87c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     880:	80 91 f0 00 	lds	r24, 0x00F0
     884:	88 60       	ori	r24, 0x08	; 8
     886:	80 93 f0 00 	sts	0x00F0, r24
     88a:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     88e:	ff 91       	pop	r31
     890:	ef 91       	pop	r30
     892:	bf 91       	pop	r27
     894:	af 91       	pop	r26
     896:	9f 91       	pop	r25
     898:	8f 91       	pop	r24
     89a:	7f 91       	pop	r23
     89c:	6f 91       	pop	r22
     89e:	5f 91       	pop	r21
     8a0:	4f 91       	pop	r20
     8a2:	3f 91       	pop	r19
     8a4:	2f 91       	pop	r18
     8a6:	1f 91       	pop	r17
     8a8:	0f 90       	pop	r0
     8aa:	0b be       	out	0x3b, r0	; 59
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	0f 90       	pop	r0
     8b2:	1f 90       	pop	r1
     8b4:	18 95       	reti

000008b6 <Endpoint_Write_Control_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     8b6:	28 2f       	mov	r18, r24
     8b8:	39 2f       	mov	r19, r25
     8ba:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     8bc:	80 91 40 02 	lds	r24, 0x0240
     8c0:	90 91 41 02 	lds	r25, 0x0241
     8c4:	86 17       	cp	r24, r22
     8c6:	97 07       	cpc	r25, r23
     8c8:	18 f4       	brcc	.+6      	; 0x8d0 <Endpoint_Write_Control_Stream_LE+0x1a>
     8ca:	bc 01       	movw	r22, r24
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	35 c0       	rjmp	.+106    	; 0x93a <Endpoint_Write_Control_Stream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8d0:	61 15       	cp	r22, r1
     8d2:	71 05       	cpc	r23, r1
     8d4:	d9 f7       	brne	.-10     	; 0x8cc <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8d6:	80 91 e8 00 	lds	r24, 0x00E8
     8da:	8e 77       	andi	r24, 0x7E	; 126
     8dc:	80 93 e8 00 	sts	0x00E8, r24
     8e0:	f5 cf       	rjmp	.-22     	; 0x8cc <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8e2:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8e4:	88 23       	and	r24, r24
     8e6:	f1 f1       	breq	.+124    	; 0x964 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8e8:	85 30       	cpi	r24, 0x05	; 5
     8ea:	c1 f1       	breq	.+112    	; 0x95c <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8ec:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8f0:	83 fd       	sbrc	r24, 3
     8f2:	36 c0       	rjmp	.+108    	; 0x960 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8f4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     8f8:	82 fd       	sbrc	r24, 2
     8fa:	2a c0       	rjmp	.+84     	; 0x950 <Endpoint_Write_Control_Stream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8fc:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     900:	80 ff       	sbrs	r24, 0
     902:	1b c0       	rjmp	.+54     	; 0x93a <Endpoint_Write_Control_Stream_LE+0x84>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
     904:	80 91 f2 00 	lds	r24, 0x00F2
     908:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     90c:	06 c0       	rjmp	.+12     	; 0x91a <Endpoint_Write_Control_Stream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     90e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     910:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     914:	61 50       	subi	r22, 0x01	; 1
     916:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     918:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     91a:	61 15       	cp	r22, r1
     91c:	71 05       	cpc	r23, r1
     91e:	19 f0       	breq	.+6      	; 0x926 <Endpoint_Write_Control_Stream_LE+0x70>
     920:	88 30       	cpi	r24, 0x08	; 8
     922:	91 05       	cpc	r25, r1
     924:	a0 f3       	brcs	.-24     	; 0x90e <Endpoint_Write_Control_Stream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	88 30       	cpi	r24, 0x08	; 8
     92a:	91 05       	cpc	r25, r1
     92c:	09 f0       	breq	.+2      	; 0x930 <Endpoint_Write_Control_Stream_LE+0x7a>
     92e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     930:	80 91 e8 00 	lds	r24, 0x00E8
     934:	8e 77       	andi	r24, 0x7E	; 126
     936:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     93a:	61 15       	cp	r22, r1
     93c:	71 05       	cpc	r23, r1
     93e:	89 f6       	brne	.-94     	; 0x8e2 <Endpoint_Write_Control_Stream_LE+0x2c>
     940:	22 23       	and	r18, r18
     942:	79 f6       	brne	.-98     	; 0x8e2 <Endpoint_Write_Control_Stream_LE+0x2c>
     944:	05 c0       	rjmp	.+10     	; 0x950 <Endpoint_Write_Control_Stream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     946:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     948:	88 23       	and	r24, r24
     94a:	61 f0       	breq	.+24     	; 0x964 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     94c:	85 30       	cpi	r24, 0x05	; 5
     94e:	61 f0       	breq	.+24     	; 0x968 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     950:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     954:	82 ff       	sbrs	r24, 2
     956:	f7 cf       	rjmp	.-18     	; 0x946 <Endpoint_Write_Control_Stream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     968:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     96a:	08 95       	ret

0000096c <Endpoint_Write_Control_PStream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     96c:	e8 2f       	mov	r30, r24
     96e:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     970:	80 91 40 02 	lds	r24, 0x0240
     974:	90 91 41 02 	lds	r25, 0x0241
     978:	86 17       	cp	r24, r22
     97a:	97 07       	cpc	r25, r23
     97c:	18 f4       	brcc	.+6      	; 0x984 <Endpoint_Write_Control_PStream_LE+0x18>
     97e:	bc 01       	movw	r22, r24
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	37 c0       	rjmp	.+110    	; 0x9f2 <Endpoint_Write_Control_PStream_LE+0x86>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     984:	61 15       	cp	r22, r1
     986:	71 05       	cpc	r23, r1
     988:	d9 f7       	brne	.-10     	; 0x980 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     98a:	80 91 e8 00 	lds	r24, 0x00E8
     98e:	8e 77       	andi	r24, 0x7E	; 126
     990:	80 93 e8 00 	sts	0x00E8, r24
     994:	f5 cf       	rjmp	.-22     	; 0x980 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     996:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     998:	88 23       	and	r24, r24
     99a:	09 f4       	brne	.+2      	; 0x99e <Endpoint_Write_Control_PStream_LE+0x32>
     99c:	3f c0       	rjmp	.+126    	; 0xa1c <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     99e:	85 30       	cpi	r24, 0x05	; 5
     9a0:	c9 f1       	breq	.+114    	; 0xa14 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9a2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9a6:	83 fd       	sbrc	r24, 3
     9a8:	37 c0       	rjmp	.+110    	; 0xa18 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9aa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     9ae:	82 fd       	sbrc	r24, 2
     9b0:	2b c0       	rjmp	.+86     	; 0xa08 <Endpoint_Write_Control_PStream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9b2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     9b6:	80 ff       	sbrs	r24, 0
     9b8:	1c c0       	rjmp	.+56     	; 0x9f2 <Endpoint_Write_Control_PStream_LE+0x86>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
     9ba:	80 91 f2 00 	lds	r24, 0x00F2
     9be:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <Endpoint_Write_Control_PStream_LE+0x66>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     9c4:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9c6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     9ca:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     9cc:	61 50       	subi	r22, 0x01	; 1
     9ce:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     9d0:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9d2:	61 15       	cp	r22, r1
     9d4:	71 05       	cpc	r23, r1
     9d6:	19 f0       	breq	.+6      	; 0x9de <Endpoint_Write_Control_PStream_LE+0x72>
     9d8:	88 30       	cpi	r24, 0x08	; 8
     9da:	91 05       	cpc	r25, r1
     9dc:	98 f3       	brcs	.-26     	; 0x9c4 <Endpoint_Write_Control_PStream_LE+0x58>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9de:	21 e0       	ldi	r18, 0x01	; 1
     9e0:	88 30       	cpi	r24, 0x08	; 8
     9e2:	91 05       	cpc	r25, r1
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <Endpoint_Write_Control_PStream_LE+0x7c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9e8:	80 91 e8 00 	lds	r24, 0x00E8
     9ec:	8e 77       	andi	r24, 0x7E	; 126
     9ee:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     9f2:	61 15       	cp	r22, r1
     9f4:	71 05       	cpc	r23, r1
     9f6:	79 f6       	brne	.-98     	; 0x996 <Endpoint_Write_Control_PStream_LE+0x2a>
     9f8:	22 23       	and	r18, r18
     9fa:	69 f6       	brne	.-102    	; 0x996 <Endpoint_Write_Control_PStream_LE+0x2a>
     9fc:	05 c0       	rjmp	.+10     	; 0xa08 <Endpoint_Write_Control_PStream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9fe:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a00:	88 23       	and	r24, r24
     a02:	61 f0       	breq	.+24     	; 0xa1c <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a04:	85 30       	cpi	r24, 0x05	; 5
     a06:	61 f0       	breq	.+24     	; 0xa20 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a08:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a0c:	82 ff       	sbrs	r24, 2
     a0e:	f7 cf       	rjmp	.-18     	; 0x9fe <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a20:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a22:	08 95       	ret

00000a24 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	ac 97       	sbiw	r28, 0x2c	; 44
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	f8 94       	cli
     a36:	de bf       	out	0x3e, r29	; 62
     a38:	0f be       	out	0x3f, r0	; 63
     a3a:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     a3c:	ea e3       	ldi	r30, 0x3A	; 58
     a3e:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     a40:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     a44:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a46:	22 e0       	ldi	r18, 0x02	; 2
     a48:	e2 34       	cpi	r30, 0x42	; 66
     a4a:	f2 07       	cpc	r31, r18
     a4c:	c9 f7       	brne	.-14     	; 0xa40 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     a4e:	66 dc       	rcall	.-1844   	; 0x31c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a50:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     a54:	83 ff       	sbrs	r24, 3
     a56:	31 c1       	rjmp	.+610    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a58:	80 91 3a 02 	lds	r24, 0x023A

		switch (USB_ControlRequest.bRequest)
     a5c:	20 91 3b 02 	lds	r18, 0x023B
     a60:	25 30       	cpi	r18, 0x05	; 5
     a62:	09 f4       	brne	.+2      	; 0xa66 <USB_Device_ProcessControlRequest+0x42>
     a64:	84 c0       	rjmp	.+264    	; 0xb6e <USB_Device_ProcessControlRequest+0x14a>
     a66:	26 30       	cpi	r18, 0x06	; 6
     a68:	40 f4       	brcc	.+16     	; 0xa7a <USB_Device_ProcessControlRequest+0x56>
     a6a:	21 30       	cpi	r18, 0x01	; 1
     a6c:	a1 f1       	breq	.+104    	; 0xad6 <USB_Device_ProcessControlRequest+0xb2>
     a6e:	21 30       	cpi	r18, 0x01	; 1
     a70:	70 f0       	brcs	.+28     	; 0xa8e <USB_Device_ProcessControlRequest+0x6a>
     a72:	23 30       	cpi	r18, 0x03	; 3
     a74:	09 f0       	breq	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0x54>
     a76:	21 c1       	rjmp	.+578    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
     a78:	2e c0       	rjmp	.+92     	; 0xad6 <USB_Device_ProcessControlRequest+0xb2>
     a7a:	28 30       	cpi	r18, 0x08	; 8
     a7c:	09 f4       	brne	.+2      	; 0xa80 <USB_Device_ProcessControlRequest+0x5c>
     a7e:	f0 c0       	rjmp	.+480    	; 0xc60 <USB_Device_ProcessControlRequest+0x23c>
     a80:	29 30       	cpi	r18, 0x09	; 9
     a82:	09 f4       	brne	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x62>
     a84:	ff c0       	rjmp	.+510    	; 0xc84 <USB_Device_ProcessControlRequest+0x260>
     a86:	26 30       	cpi	r18, 0x06	; 6
     a88:	09 f0       	breq	.+2      	; 0xa8c <USB_Device_ProcessControlRequest+0x68>
     a8a:	17 c1       	rjmp	.+558    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
     a8c:	93 c0       	rjmp	.+294    	; 0xbb4 <USB_Device_ProcessControlRequest+0x190>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a8e:	80 38       	cpi	r24, 0x80	; 128
     a90:	21 f0       	breq	.+8      	; 0xa9a <USB_Device_ProcessControlRequest+0x76>
     a92:	82 38       	cpi	r24, 0x82	; 130
     a94:	09 f0       	breq	.+2      	; 0xa98 <USB_Device_ProcessControlRequest+0x74>
     a96:	11 c1       	rjmp	.+546    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
     a98:	08 c0       	rjmp	.+16     	; 0xaaa <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a9a:	80 91 37 02 	lds	r24, 0x0237
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     a9e:	90 91 38 02 	lds	r25, 0x0238
     aa2:	99 23       	and	r25, r25
     aa4:	71 f0       	breq	.+28     	; 0xac2 <USB_Device_ProcessControlRequest+0x9e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     aa6:	82 60       	ori	r24, 0x02	; 2
     aa8:	0c c0       	rjmp	.+24     	; 0xac2 <USB_Device_ProcessControlRequest+0x9e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aaa:	80 91 3e 02 	lds	r24, 0x023E
     aae:	8f 70       	andi	r24, 0x0F	; 15
     ab0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     ab4:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	95 ff       	sbrs	r25, 5
     abc:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     abe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ac2:	90 91 e8 00 	lds	r25, 0x00E8
     ac6:	97 7f       	andi	r25, 0xF7	; 247
     ac8:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     acc:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     ad0:	10 92 f1 00 	sts	0x00F1, r1
     ad4:	d0 c0       	rjmp	.+416    	; 0xc76 <USB_Device_ProcessControlRequest+0x252>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ad6:	88 23       	and	r24, r24
     ad8:	19 f0       	breq	.+6      	; 0xae0 <USB_Device_ProcessControlRequest+0xbc>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	09 f0       	breq	.+2      	; 0xae0 <USB_Device_ProcessControlRequest+0xbc>
     ade:	ed c0       	rjmp	.+474    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	8f 71       	andi	r24, 0x1F	; 31
     ae4:	90 70       	andi	r25, 0x00	; 0
     ae6:	00 97       	sbiw	r24, 0x00	; 0
     ae8:	29 f0       	breq	.+10     	; 0xaf4 <USB_Device_ProcessControlRequest+0xd0>
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	91 05       	cpc	r25, r1
     aee:	09 f0       	breq	.+2      	; 0xaf2 <USB_Device_ProcessControlRequest+0xce>
     af0:	e4 c0       	rjmp	.+456    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
     af2:	0b c0       	rjmp	.+22     	; 0xb0a <USB_Device_ProcessControlRequest+0xe6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     af4:	80 91 3c 02 	lds	r24, 0x023C
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	09 f0       	breq	.+2      	; 0xafe <USB_Device_ProcessControlRequest+0xda>
     afc:	de c0       	rjmp	.+444    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     afe:	23 30       	cpi	r18, 0x03	; 3
     b00:	09 f0       	breq	.+2      	; 0xb04 <USB_Device_ProcessControlRequest+0xe0>
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	80 93 38 02 	sts	0x0238, r24
     b08:	2c c0       	rjmp	.+88     	; 0xb62 <USB_Device_ProcessControlRequest+0x13e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     b0a:	80 91 3c 02 	lds	r24, 0x023C
     b0e:	88 23       	and	r24, r24
     b10:	41 f5       	brne	.+80     	; 0xb62 <USB_Device_ProcessControlRequest+0x13e>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b12:	20 91 3e 02 	lds	r18, 0x023E
     b16:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b18:	09 f4       	brne	.+2      	; 0xb1c <USB_Device_ProcessControlRequest+0xf8>
     b1a:	cf c0       	rjmp	.+414    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b1c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b20:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     b24:	80 ff       	sbrs	r24, 0
     b26:	1d c0       	rjmp	.+58     	; 0xb62 <USB_Device_ProcessControlRequest+0x13e>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b28:	80 91 3b 02 	lds	r24, 0x023B
     b2c:	83 30       	cpi	r24, 0x03	; 3
     b2e:	21 f4       	brne	.+8      	; 0xb38 <USB_Device_ProcessControlRequest+0x114>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b30:	80 91 eb 00 	lds	r24, 0x00EB
     b34:	80 62       	ori	r24, 0x20	; 32
     b36:	13 c0       	rjmp	.+38     	; 0xb5e <USB_Device_ProcessControlRequest+0x13a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b38:	80 91 eb 00 	lds	r24, 0x00EB
     b3c:	80 61       	ori	r24, 0x10	; 16
     b3e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <USB_Device_ProcessControlRequest+0x128>
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	2a 95       	dec	r18
     b4e:	e2 f7       	brpl	.-8      	; 0xb48 <USB_Device_ProcessControlRequest+0x124>
     b50:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     b54:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b58:	80 91 eb 00 	lds	r24, 0x00EB
     b5c:	88 60       	ori	r24, 0x08	; 8
     b5e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b62:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b66:	80 91 e8 00 	lds	r24, 0x00E8
     b6a:	87 7f       	andi	r24, 0xF7	; 247
     b6c:	87 c0       	rjmp	.+270    	; 0xc7c <USB_Device_ProcessControlRequest+0x258>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b6e:	88 23       	and	r24, r24
     b70:	09 f0       	breq	.+2      	; 0xb74 <USB_Device_ProcessControlRequest+0x150>
     b72:	a3 c0       	rjmp	.+326    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     b74:	10 91 3c 02 	lds	r17, 0x023C
     b78:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b7a:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b7c:	f8 94       	cli
     b7e:	80 91 e8 00 	lds	r24, 0x00E8
     b82:	87 7f       	andi	r24, 0xF7	; 247
     b84:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b88:	e3 dc       	rcall	.-1594   	; 0x550 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b8a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     b8e:	80 ff       	sbrs	r24, 0
     b90:	fc cf       	rjmp	.-8      	; 0xb8a <USB_Device_ProcessControlRequest+0x166>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     b92:	80 91 e3 00 	lds	r24, 0x00E3
     b96:	80 78       	andi	r24, 0x80	; 128
     b98:	81 2b       	or	r24, r17

				UDADDR = Temp;
     b9a:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     ba4:	11 23       	and	r17, r17
     ba6:	11 f0       	breq	.+4      	; 0xbac <USB_Device_ProcessControlRequest+0x188>
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	01 c0       	rjmp	.+2      	; 0xbae <USB_Device_ProcessControlRequest+0x18a>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     bb0:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     bb2:	83 c0       	rjmp	.+262    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bb4:	80 58       	subi	r24, 0x80	; 128
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	08 f0       	brcs	.+2      	; 0xbbc <USB_Device_ProcessControlRequest+0x198>
     bba:	7f c0       	rjmp	.+254    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bbc:	80 91 3c 02 	lds	r24, 0x023C
     bc0:	90 91 3d 02 	lds	r25, 0x023D
     bc4:	23 e0       	ldi	r18, 0x03	; 3
     bc6:	8c 3d       	cpi	r24, 0xDC	; 220
     bc8:	92 07       	cpc	r25, r18
     bca:	91 f5       	brne	.+100    	; 0xc30 <USB_Device_ProcessControlRequest+0x20c>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     bd0:	8a e2       	ldi	r24, 0x2A	; 42
     bd2:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     bd4:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     bd6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     bd8:	de 01       	movw	r26, r28
     bda:	15 96       	adiw	r26, 0x05	; 5
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     be0:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     be2:	61 e2       	ldi	r22, 0x21	; 33
     be4:	e4 2f       	mov	r30, r20
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	60 93 57 00 	sts	0x0057, r22
     bec:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
     bee:	80 ff       	sbrs	r24, 0
     bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <USB_Device_ProcessControlRequest+0x1d4>
					{
						SerialByte >>= 4;
     bf2:	e2 95       	swap	r30
     bf4:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     bf6:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     bf8:	ef 70       	andi	r30, 0x0F	; 15
     bfa:	2e 2f       	mov	r18, r30
     bfc:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     bfe:	ea 30       	cpi	r30, 0x0A	; 10
     c00:	18 f0       	brcs	.+6      	; 0xc08 <USB_Device_ProcessControlRequest+0x1e4>
     c02:	29 5c       	subi	r18, 0xC9	; 201
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <USB_Device_ProcessControlRequest+0x1e8>
     c08:	20 5d       	subi	r18, 0xD0	; 208
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	2d 93       	st	X+, r18
     c0e:	3d 93       	st	X+, r19
     c10:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     c12:	84 31       	cpi	r24, 0x14	; 20
     c14:	91 05       	cpc	r25, r1
     c16:	31 f7       	brne	.-52     	; 0xbe4 <USB_Device_ProcessControlRequest+0x1c0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     c18:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c1a:	80 91 e8 00 	lds	r24, 0x00E8
     c1e:	87 7f       	andi	r24, 0xF7	; 247
     c20:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c24:	ce 01       	movw	r24, r28
     c26:	03 96       	adiw	r24, 0x03	; 3
     c28:	6a e2       	ldi	r22, 0x2A	; 42
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	44 de       	rcall	.-888    	; 0x8b6 <Endpoint_Write_Control_Stream_LE>
     c2e:	12 c0       	rjmp	.+36     	; 0xc54 <USB_Device_ProcessControlRequest+0x230>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c30:	60 91 3e 02 	lds	r22, 0x023E
     c34:	ae 01       	movw	r20, r28
     c36:	4f 5f       	subi	r20, 0xFF	; 255
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
     c3a:	e2 db       	rcall	.-2108   	; 0x400 <CALLBACK_USB_GetDescriptor>
     c3c:	bc 01       	movw	r22, r24
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	09 f4       	brne	.+2      	; 0xc44 <USB_Device_ProcessControlRequest+0x220>
     c42:	3b c0       	rjmp	.+118    	; 0xcba <USB_Device_ProcessControlRequest+0x296>
     c44:	80 91 e8 00 	lds	r24, 0x00E8
     c48:	87 7f       	andi	r24, 0xF7	; 247
     c4a:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
     c52:	8c de       	rcall	.-744    	; 0x96c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c54:	80 91 e8 00 	lds	r24, 0x00E8
     c58:	8b 77       	andi	r24, 0x7B	; 123
     c5a:	80 93 e8 00 	sts	0x00E8, r24
     c5e:	2d c0       	rjmp	.+90     	; 0xcba <USB_Device_ProcessControlRequest+0x296>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c60:	80 38       	cpi	r24, 0x80	; 128
     c62:	59 f5       	brne	.+86     	; 0xcba <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c64:	80 91 e8 00 	lds	r24, 0x00E8
     c68:	87 7f       	andi	r24, 0xF7	; 247
     c6a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     c6e:	80 91 36 02 	lds	r24, 0x0236
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c72:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c76:	80 91 e8 00 	lds	r24, 0x00E8
     c7a:	8e 77       	andi	r24, 0x7E	; 126
     c7c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     c80:	67 dc       	rcall	.-1842   	; 0x550 <Endpoint_ClearStatusStage>
     c82:	1b c0       	rjmp	.+54     	; 0xcba <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c84:	88 23       	and	r24, r24
     c86:	c9 f4       	brne	.+50     	; 0xcba <USB_Device_ProcessControlRequest+0x296>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     c88:	90 91 3c 02 	lds	r25, 0x023C
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	a8 f4       	brcc	.+42     	; 0xcba <USB_Device_ProcessControlRequest+0x296>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c90:	80 91 e8 00 	lds	r24, 0x00E8
     c94:	87 7f       	andi	r24, 0xF7	; 247
     c96:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c9a:	90 93 36 02 	sts	0x0236, r25

	Endpoint_ClearStatusStage();
     c9e:	58 dc       	rcall	.-1872   	; 0x550 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     ca0:	80 91 36 02 	lds	r24, 0x0236
     ca4:	88 23       	and	r24, r24
     ca6:	21 f4       	brne	.+8      	; 0xcb0 <USB_Device_ProcessControlRequest+0x28c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ca8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     cac:	87 ff       	sbrs	r24, 7
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <USB_Device_ProcessControlRequest+0x290>
     cb0:	84 e0       	ldi	r24, 0x04	; 4
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <USB_Device_ProcessControlRequest+0x292>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     cb8:	28 db       	rcall	.-2480   	; 0x30a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cba:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     cbe:	83 ff       	sbrs	r24, 3
     cc0:	0a c0       	rjmp	.+20     	; 0xcd6 <USB_Device_ProcessControlRequest+0x2b2>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cc2:	80 91 eb 00 	lds	r24, 0x00EB
     cc6:	80 62       	ori	r24, 0x20	; 32
     cc8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ccc:	80 91 e8 00 	lds	r24, 0x00E8
     cd0:	87 7f       	andi	r24, 0xF7	; 247
     cd2:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     cd6:	ac 96       	adiw	r28, 0x2c	; 44
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	08 95       	ret

00000cec <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
     cec:	08 95       	ret

00000cee <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     cee:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     cf0:	8e b3       	in	r24, 0x1e	; 30
     cf2:	88 23       	and	r24, r24
     cf4:	a9 f0       	breq	.+42     	; 0xd20 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     cf6:	80 91 e9 00 	lds	r24, 0x00E9
     cfa:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     cfc:	90 91 ec 00 	lds	r25, 0x00EC
     d00:	90 ff       	sbrs	r25, 0
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <USB_USBTask+0x1a>
     d04:	10 e8       	ldi	r17, 0x80	; 128
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <USB_USBTask+0x1c>
     d08:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d0a:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d0c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d10:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     d14:	83 ff       	sbrs	r24, 3
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <USB_USBTask+0x2c>
		  USB_Device_ProcessControlRequest();
     d18:	85 de       	rcall	.-758    	; 0xa24 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d1a:	1f 70       	andi	r17, 0x0F	; 15
     d1c:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
     d20:	1f 91       	pop	r17
     d22:	08 95       	ret

00000d24 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d2a:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     d2e:	83 ff       	sbrs	r24, 3
     d30:	a2 c0       	rjmp	.+324    	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     d32:	88 81       	ld	r24, Y
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	20 91 3e 02 	lds	r18, 0x023E
     d3a:	30 91 3f 02 	lds	r19, 0x023F
     d3e:	28 17       	cp	r18, r24
     d40:	39 07       	cpc	r19, r25
     d42:	09 f0       	breq	.+2      	; 0xd46 <CDC_Device_ProcessControlRequest+0x22>
     d44:	98 c0       	rjmp	.+304    	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
     d46:	80 91 3b 02 	lds	r24, 0x023B
     d4a:	81 32       	cpi	r24, 0x21	; 33
     d4c:	69 f0       	breq	.+26     	; 0xd68 <CDC_Device_ProcessControlRequest+0x44>
     d4e:	82 32       	cpi	r24, 0x22	; 34
     d50:	20 f4       	brcc	.+8      	; 0xd5a <CDC_Device_ProcessControlRequest+0x36>
     d52:	80 32       	cpi	r24, 0x20	; 32
     d54:	09 f0       	breq	.+2      	; 0xd58 <CDC_Device_ProcessControlRequest+0x34>
     d56:	8f c0       	rjmp	.+286    	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
     d58:	3c c0       	rjmp	.+120    	; 0xdd2 <CDC_Device_ProcessControlRequest+0xae>
     d5a:	82 32       	cpi	r24, 0x22	; 34
     d5c:	09 f4       	brne	.+2      	; 0xd60 <CDC_Device_ProcessControlRequest+0x3c>
     d5e:	6a c0       	rjmp	.+212    	; 0xe34 <CDC_Device_ProcessControlRequest+0x110>
     d60:	83 32       	cpi	r24, 0x23	; 35
     d62:	09 f0       	breq	.+2      	; 0xd66 <CDC_Device_ProcessControlRequest+0x42>
     d64:	88 c0       	rjmp	.+272    	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
     d66:	79 c0       	rjmp	.+242    	; 0xe5a <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     d68:	80 91 3a 02 	lds	r24, 0x023A
     d6c:	81 3a       	cpi	r24, 0xA1	; 161
     d6e:	09 f0       	breq	.+2      	; 0xd72 <CDC_Device_ProcessControlRequest+0x4e>
     d70:	82 c0       	rjmp	.+260    	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d72:	80 91 e8 00 	lds	r24, 0x00E8
     d76:	87 7f       	andi	r24, 0xF7	; 247
     d78:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d7c:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     d80:	80 ff       	sbrs	r24, 0
     d82:	fc cf       	rjmp	.-8      	; 0xd7c <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     d84:	8c 89       	ldd	r24, Y+20	; 0x14
     d86:	9d 89       	ldd	r25, Y+21	; 0x15
     d88:	ae 89       	ldd	r26, Y+22	; 0x16
     d8a:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     d8c:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     d90:	29 2f       	mov	r18, r25
     d92:	3a 2f       	mov	r19, r26
     d94:	4b 2f       	mov	r20, r27
     d96:	55 27       	eor	r21, r21
     d98:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
     d9c:	9d 01       	movw	r18, r26
     d9e:	44 27       	eor	r20, r20
     da0:	55 27       	eor	r21, r21
     da2:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
     da6:	8b 2f       	mov	r24, r27
     da8:	99 27       	eor	r25, r25
     daa:	aa 27       	eor	r26, r26
     dac:	bb 27       	eor	r27, r27
     dae:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     db2:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     db4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     db8:	89 8d       	ldd	r24, Y+25	; 0x19
     dba:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     dbe:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dc0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     dc4:	80 91 e8 00 	lds	r24, 0x00E8
     dc8:	8e 77       	andi	r24, 0x7E	; 126
     dca:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     dce:	c0 db       	rcall	.-2176   	; 0x550 <Endpoint_ClearStatusStage>
     dd0:	52 c0       	rjmp	.+164    	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     dd2:	80 91 3a 02 	lds	r24, 0x023A
     dd6:	81 32       	cpi	r24, 0x21	; 33
     dd8:	09 f0       	breq	.+2      	; 0xddc <CDC_Device_ProcessControlRequest+0xb8>
     dda:	4d c0       	rjmp	.+154    	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ddc:	80 91 e8 00 	lds	r24, 0x00E8
     de0:	87 7f       	andi	r24, 0xF7	; 247
     de2:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <CDC_Device_ProcessControlRequest+0xcc>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     de8:	8e b3       	in	r24, 0x1e	; 30
     dea:	88 23       	and	r24, r24
     dec:	09 f4       	brne	.+2      	; 0xdf0 <CDC_Device_ProcessControlRequest+0xcc>
     dee:	43 c0       	rjmp	.+134    	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     df0:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     df4:	82 ff       	sbrs	r24, 2
     df6:	f8 cf       	rjmp	.-16     	; 0xde8 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     df8:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
     dfc:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
     e00:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
     e04:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     e08:	3c 8b       	std	Y+20, r19	; 0x14
     e0a:	2d 8b       	std	Y+21, r18	; 0x15
     e0c:	9e 8b       	std	Y+22, r25	; 0x16
     e0e:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e10:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     e14:	88 8f       	std	Y+24, r24	; 0x18
     e16:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     e1a:	89 8f       	std	Y+25, r24	; 0x19
     e1c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     e20:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e22:	80 91 e8 00 	lds	r24, 0x00E8
     e26:	8b 77       	andi	r24, 0x7B	; 123
     e28:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     e2c:	91 db       	rcall	.-2270   	; 0x550 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     e2e:	ce 01       	movw	r24, r28
     e30:	a6 da       	rcall	.-2740   	; 0x37e <EVENT_CDC_Device_LineEncodingChanged>
     e32:	21 c0       	rjmp	.+66     	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e34:	80 91 3a 02 	lds	r24, 0x023A
     e38:	81 32       	cpi	r24, 0x21	; 33
     e3a:	e9 f4       	brne	.+58     	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e3c:	80 91 e8 00 	lds	r24, 0x00E8
     e40:	87 7f       	andi	r24, 0xF7	; 247
     e42:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e46:	84 db       	rcall	.-2296   	; 0x550 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     e48:	80 91 3c 02 	lds	r24, 0x023C
     e4c:	90 91 3d 02 	lds	r25, 0x023D
     e50:	99 8b       	std	Y+17, r25	; 0x11
     e52:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     e54:	ce 01       	movw	r24, r28
     e56:	d2 d0       	rcall	.+420    	; 0xffc <CDC_Device_Event_Stub>
     e58:	0e c0       	rjmp	.+28     	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e5a:	80 91 3a 02 	lds	r24, 0x023A
     e5e:	81 32       	cpi	r24, 0x21	; 33
     e60:	51 f4       	brne	.+20     	; 0xe76 <CDC_Device_ProcessControlRequest+0x152>
     e62:	80 91 e8 00 	lds	r24, 0x00E8
     e66:	87 7f       	andi	r24, 0xF7	; 247
     e68:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     e6c:	71 db       	rcall	.-2334   	; 0x550 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     e6e:	ce 01       	movw	r24, r28
     e70:	60 91 3c 02 	lds	r22, 0x023C
     e74:	c3 d0       	rcall	.+390    	; 0xffc <CDC_Device_Event_Stub>
			}

			break;
	}
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e82:	40 96       	adiw	r24, 0x10	; 16
     e84:	fc 01       	movw	r30, r24
     e86:	8b e0       	ldi	r24, 0x0B	; 11
     e88:	df 01       	movw	r26, r30
     e8a:	1d 92       	st	X+, r1
     e8c:	8a 95       	dec	r24
     e8e:	e9 f7       	brne	.-6      	; 0xe8a <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     e94:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	61 e0       	ldi	r22, 0x01	; 1
     ea0:	13 db       	rcall	.-2522   	; 0x4c8 <Endpoint_ConfigureEndpointTable>
     ea2:	88 23       	and	r24, r24
     ea4:	59 f0       	breq	.+22     	; 0xebc <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     ea6:	ce 01       	movw	r24, r28
     ea8:	06 96       	adiw	r24, 0x06	; 6
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	0d db       	rcall	.-2534   	; 0x4c8 <Endpoint_ConfigureEndpointTable>
     eae:	88 23       	and	r24, r24
     eb0:	29 f0       	breq	.+10     	; 0xebc <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     eb2:	ce 01       	movw	r24, r28
     eb4:	0b 96       	adiw	r24, 0x0b	; 11
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	07 db       	rcall	.-2546   	; 0x4c8 <Endpoint_ConfigureEndpointTable>
     eba:	01 c0       	rjmp	.+2      	; 0xebe <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
     ebc:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ed0:	8e b3       	in	r24, 0x1e	; 30
     ed2:	84 30       	cpi	r24, 0x04	; 4
     ed4:	f9 f4       	brne	.+62     	; 0xf14 <CDC_Device_SendByte+0x50>
     ed6:	24 89       	ldd	r18, Z+20	; 0x14
     ed8:	35 89       	ldd	r19, Z+21	; 0x15
     eda:	46 89       	ldd	r20, Z+22	; 0x16
     edc:	57 89       	ldd	r21, Z+23	; 0x17
     ede:	21 15       	cp	r18, r1
     ee0:	31 05       	cpc	r19, r1
     ee2:	41 05       	cpc	r20, r1
     ee4:	51 05       	cpc	r21, r1
     ee6:	b1 f0       	breq	.+44     	; 0xf14 <CDC_Device_SendByte+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ee8:	81 81       	ldd	r24, Z+1	; 0x01
     eea:	8f 70       	andi	r24, 0x0F	; 15
     eec:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ef0:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     ef4:	85 fd       	sbrc	r24, 5
     ef6:	0a c0       	rjmp	.+20     	; 0xf0c <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ef8:	80 91 e8 00 	lds	r24, 0x00E8
     efc:	8e 77       	andi	r24, 0x7E	; 126
     efe:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f02:	69 83       	std	Y+1, r22	; 0x01
     f04:	44 db       	rcall	.-2424   	; 0x58e <Endpoint_WaitUntilReady>
     f06:	69 81       	ldd	r22, Y+1	; 0x01
     f08:	88 23       	and	r24, r24
     f0a:	29 f4       	brne	.+10     	; 0xf16 <CDC_Device_SendByte+0x52>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f0c:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <CDC_Device_SendByte+0x52>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f14:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f1e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f20:	8e b3       	in	r24, 0x1e	; 30
     f22:	84 30       	cpi	r24, 0x04	; 4
     f24:	29 f5       	brne	.+74     	; 0xf70 <CDC_Device_Flush+0x52>
     f26:	24 89       	ldd	r18, Z+20	; 0x14
     f28:	35 89       	ldd	r19, Z+21	; 0x15
     f2a:	46 89       	ldd	r20, Z+22	; 0x16
     f2c:	57 89       	ldd	r21, Z+23	; 0x17
     f2e:	21 15       	cp	r18, r1
     f30:	31 05       	cpc	r19, r1
     f32:	41 05       	cpc	r20, r1
     f34:	51 05       	cpc	r21, r1
     f36:	e1 f0       	breq	.+56     	; 0xf70 <CDC_Device_Flush+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f38:	81 81       	ldd	r24, Z+1	; 0x01
     f3a:	8f 70       	andi	r24, 0x0F	; 15
     f3c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
     f40:	80 91 f2 00 	lds	r24, 0x00F2
     f44:	90 91 f3 00 	lds	r25, 0x00F3

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	a1 f0       	breq	.+40     	; 0xf74 <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f4c:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f50:	80 91 e8 00 	lds	r24, 0x00E8
     f54:	8e 77       	andi	r24, 0x7E	; 126
     f56:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     f5a:	95 fd       	sbrc	r25, 5
     f5c:	0d c0       	rjmp	.+26     	; 0xf78 <CDC_Device_Flush+0x5a>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f5e:	17 db       	rcall	.-2514   	; 0x58e <Endpoint_WaitUntilReady>
     f60:	88 23       	and	r24, r24
     f62:	59 f4       	brne	.+22     	; 0xf7a <CDC_Device_Flush+0x5c>
     f64:	90 91 e8 00 	lds	r25, 0x00E8
     f68:	9e 77       	andi	r25, 0x7E	; 126
     f6a:	90 93 e8 00 	sts	0x00E8, r25
     f6e:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
     f78:	80 e0       	ldi	r24, 0x00	; 0
}
     f7a:	08 95       	ret

00000f7c <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f7c:	2e b3       	in	r18, 0x1e	; 30
     f7e:	24 30       	cpi	r18, 0x04	; 4
     f80:	59 f4       	brne	.+22     	; 0xf98 <CDC_Device_USBTask+0x1c>
     f82:	fc 01       	movw	r30, r24
     f84:	24 89       	ldd	r18, Z+20	; 0x14
     f86:	35 89       	ldd	r19, Z+21	; 0x15
     f88:	46 89       	ldd	r20, Z+22	; 0x16
     f8a:	57 89       	ldd	r21, Z+23	; 0x17
     f8c:	21 15       	cp	r18, r1
     f8e:	31 05       	cpc	r19, r1
     f90:	41 05       	cpc	r20, r1
     f92:	51 05       	cpc	r21, r1
     f94:	09 f0       	breq	.+2      	; 0xf98 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
     f96:	c3 cf       	rjmp	.-122    	; 0xf1e <CDC_Device_Flush>
     f98:	08 95       	ret

00000f9a <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f9a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f9c:	8e b3       	in	r24, 0x1e	; 30
     f9e:	84 30       	cpi	r24, 0x04	; 4
     fa0:	49 f5       	brne	.+82     	; 0xff4 <CDC_Device_ReceiveByte+0x5a>
     fa2:	24 89       	ldd	r18, Z+20	; 0x14
     fa4:	35 89       	ldd	r19, Z+21	; 0x15
     fa6:	46 89       	ldd	r20, Z+22	; 0x16
     fa8:	57 89       	ldd	r21, Z+23	; 0x17
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	41 05       	cpc	r20, r1
     fb0:	51 05       	cpc	r21, r1
     fb2:	01 f1       	breq	.+64     	; 0xff4 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fb4:	86 81       	ldd	r24, Z+6	; 0x06
     fb6:	8f 70       	andi	r24, 0x0F	; 15
     fb8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fbc:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     fc0:	82 ff       	sbrs	r24, 2
     fc2:	18 c0       	rjmp	.+48     	; 0xff4 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
     fc4:	80 91 f2 00 	lds	r24, 0x00F2
     fc8:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	21 f0       	breq	.+8      	; 0xfd8 <CDC_Device_ReceiveByte+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fd0:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <CDC_Device_ReceiveByte+0x42>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     fd8:	2f ef       	ldi	r18, 0xFF	; 255
     fda:	3f ef       	ldi	r19, 0xFF	; 255
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
     fdc:	80 91 f2 00 	lds	r24, 0x00F2
     fe0:	90 91 f3 00 	lds	r25, 0x00F3
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	41 f4       	brne	.+16     	; 0xff8 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fe8:	80 91 e8 00 	lds	r24, 0x00E8
     fec:	8b 77       	andi	r24, 0x7B	; 123
     fee:	80 93 e8 00 	sts	0x00E8, r24
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <CDC_Device_ReceiveByte+0x5e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     ff4:	2f ef       	ldi	r18, 0xFF	; 255
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     ff8:	c9 01       	movw	r24, r18
     ffa:	08 95       	ret

00000ffc <CDC_Device_Event_Stub>:

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{

}
     ffc:	08 95       	ret

00000ffe <__udivmodsi4>:
     ffe:	a1 e2       	ldi	r26, 0x21	; 33
    1000:	1a 2e       	mov	r1, r26
    1002:	aa 1b       	sub	r26, r26
    1004:	bb 1b       	sub	r27, r27
    1006:	fd 01       	movw	r30, r26
    1008:	0d c0       	rjmp	.+26     	; 0x1024 <__udivmodsi4_ep>

0000100a <__udivmodsi4_loop>:
    100a:	aa 1f       	adc	r26, r26
    100c:	bb 1f       	adc	r27, r27
    100e:	ee 1f       	adc	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	a2 17       	cp	r26, r18
    1014:	b3 07       	cpc	r27, r19
    1016:	e4 07       	cpc	r30, r20
    1018:	f5 07       	cpc	r31, r21
    101a:	20 f0       	brcs	.+8      	; 0x1024 <__udivmodsi4_ep>
    101c:	a2 1b       	sub	r26, r18
    101e:	b3 0b       	sbc	r27, r19
    1020:	e4 0b       	sbc	r30, r20
    1022:	f5 0b       	sbc	r31, r21

00001024 <__udivmodsi4_ep>:
    1024:	66 1f       	adc	r22, r22
    1026:	77 1f       	adc	r23, r23
    1028:	88 1f       	adc	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	1a 94       	dec	r1
    102e:	69 f7       	brne	.-38     	; 0x100a <__udivmodsi4_loop>
    1030:	60 95       	com	r22
    1032:	70 95       	com	r23
    1034:	80 95       	com	r24
    1036:	90 95       	com	r25
    1038:	9b 01       	movw	r18, r22
    103a:	ac 01       	movw	r20, r24
    103c:	bd 01       	movw	r22, r26
    103e:	cf 01       	movw	r24, r30
    1040:	08 95       	ret

00001042 <_exit>:
    1042:	f8 94       	cli

00001044 <__stop_program>:
    1044:	ff cf       	rjmp	.-2      	; 0x1044 <__stop_program>
